Let there be Cool Moves
===========
Nut is born, and she has basic controls.
She can walk across slopes.

Goals:
x Make Nut with basic left and right controls.
x Allow Nut to run across 1/2-block slopes.

x Add a DIVE.
x Add a WALL JUMP.
x Add CRAWLING.
x Add a SLIDE KICK.

~ Major refactoring for ROOM and WORLDMAP classes.
	+ Asset loading (tilesheets/collisions) done in advance.
	~ Loading is now more obvious.
	+ Better collision support. (independant of sprite)
	+ More robust Tile class.
	~ Easier to read, split into functionality.


~ Made PHYSICS adjustments.
	* Reduced x slowdown.
		- Nut may no longer scale a single wall.
	* Reduced vertical wall jump amount.
		- In a 4-block gap, Nut may only make 1-block progress
	* Increased jump amount.
		+ Nut may now cleanly jump over 2-tile platforms.

+ Add WALL HANG.
	* Nut must be completely overlapping a wall to hug.
	~ Dive is now a block movement.
	+ Add basic wall hang.
	+ Add crouching > wall hang combination.


+ Added DUST EFFECT.
	+ new axis_animation /w subclasses
	A bare class with fleshed out sub-classes.
		* Basic animation which starts and then stops.
		+ Bouncing sub-class.
		+ oscillate sub-class


	+ Dive - slamming the ground. Bigger effect if faster.
	+ Wall-jumping - trail in mid-air; hitting a surface.
	+ Walking - Greater effect depending on speed.


! Add DYNAMIC CAMERA.
! Add RUNNING animation.
! Add COLLECTIBLES which OPEN ROOMS.
! Add TIMER.
! Add REPLAYS.


! running glitch (over the end of a tile)
! Re-implement SLOPES. (They're broken!)
! clean overall state handling
! Use less MAGIC NUMBERS in state handling.
! Add PUNCHING.
! Holding both directional keys causes weird Nut walking.

====


! Add DYNAMIC CAMERA.

	+ Remake ToolBox.

		+ saving
		+ Tile
		+ ui tool selection
		+ Camera movement (not the tool)
		+ Pointer


	! Make Camera tool
		+ graphics (sides/locks)
		+ controls
		+ Room.Camera holds bools for each side.

		
		! loading/saving values
			+ sides load locks
			+ sides save locks


			~ fix: locks don't show while tool activated off the first screen
				~ loader init is now being called in lock

			~ fix: locks do not enable/disable by default


			! new MySprite_Loader !!
				! has to load/unload sprite immediately: slow
				! can't use clip w/h

			! clean Room.Camera


		! Camera stops at enabled enabled sides.
		! Camera smoothly animates past enabled sides.

	! Render Rooms only when they may be drawn.


===


~ Nut texture test.
	~ MySprite may be None'd and then assigned a texture

~ Stress test
	No app
		0% CPU, 2.36 GB RAM

	app (no texture)
		0% CPU, 2.40 GB RAM

	app (w/ texture)
		same as app no texture

	5000
	Class with empty draw
		15% CPU, 2.41 GB RAM (0.1 GB)

	5000
	Class with 15 sub-classes (w/ 10 variables and 2 methods)
	+ empty draw
		15% CPU, 2.83 GB RAM

	5000 Sprites with textures
		25% CPU,  2.73 GB RAM (0.4 GB)

	5000 Sprites without textures
		18% CPU, 2.73 GB RAM (0.4 GB)


In conclusion...
* Textures aren't RAM demanding.
* Drawing isn't too CPU demanding.

* Iterating through a 5000-object loop IS CPU demanding.
* Classes with many sub-classes IS RAM demanding.


MySprite suggestions/considerations:
	* OPTIONAL sub-classes. Active only when specified.
	* Be careful about the SCOPE of a loop through sprites.
	* Only remove MySprites if the process is light.


===

! CLEANING
	! level_editor camera controls go into toolbox

	! clean room and worldmap
		condense into classes

	! Improve GameRectangle
		setters
		keep_in functions
		...for every function.

		! bound_int (args: x,y or an object)